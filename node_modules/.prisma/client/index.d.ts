import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.5.1
 * Query Engine version: c88925ce44a9b89b4351aec85ba6a28979d2658e
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]> 

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type Action =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: Action
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pieces
 * const pieces = await prisma.piece.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pieces
   * const pieces = await prisma.piece.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$executeRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.piece`: Exposes CRUD operations for the **piece** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pieces
    * const pieces = await prisma.piece.findMany()
    * ```
    */
  get piece(): pieceDelegate;

  /**
   * `prisma.sentences`: Exposes CRUD operations for the **sentences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sentences
    * const sentences = await prisma.sentences.findMany()
    * ```
    */
  get sentences(): sentencesDelegate;

  /**
   * `prisma.video_info`: Exposes CRUD operations for the **video_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Video_infos
    * const video_infos = await prisma.video_info.findMany()
    * ```
    */
  get video_info(): video_infoDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const PieceDistinctFieldEnum: {
  id: 'id',
  piece_id: 'piece_id',
  title: 'title',
  status: 'status',
  created: 'created',
  updated: 'updated'
};

export declare type PieceDistinctFieldEnum = (typeof PieceDistinctFieldEnum)[keyof typeof PieceDistinctFieldEnum]


export declare const Video_infoDistinctFieldEnum: {
  id: 'id',
  piece_id: 'piece_id',
  video_id: 'video_id',
  video_url: 'video_url',
  created: 'created',
  updated: 'updated',
  status: 'status'
};

export declare type Video_infoDistinctFieldEnum = (typeof Video_infoDistinctFieldEnum)[keyof typeof Video_infoDistinctFieldEnum]


export declare const SentencesDistinctFieldEnum: {
  sentence: 'sentence',
  video_id: 'video_id',
  created: 'created',
  updated: 'updated',
  id: 'id'
};

export declare type SentencesDistinctFieldEnum = (typeof SentencesDistinctFieldEnum)[keyof typeof SentencesDistinctFieldEnum]



/**
 * Model piece
 */

export type piece = {
  id: number
  piece_id: string | null
  title: string | null
  status: string | null
  created: Date | null
  updated: Date | null
}


export type AggregatePiece = {
  count: number
  avg: PieceAvgAggregateOutputType | null
  sum: PieceSumAggregateOutputType | null
  min: PieceMinAggregateOutputType | null
  max: PieceMaxAggregateOutputType | null
}

export type PieceAvgAggregateOutputType = {
  id: number
}

export type PieceSumAggregateOutputType = {
  id: number
}

export type PieceMinAggregateOutputType = {
  id: number
}

export type PieceMaxAggregateOutputType = {
  id: number
}


export type PieceAvgAggregateInputType = {
  id?: true
}

export type PieceSumAggregateInputType = {
  id?: true
}

export type PieceMinAggregateInputType = {
  id?: true
}

export type PieceMaxAggregateInputType = {
  id?: true
}

export type AggregatePieceArgs = {
  where?: pieceWhereInput
  orderBy?: Enumerable<pieceOrderByInput>
  cursor?: pieceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<PieceDistinctFieldEnum>
  count?: true
  avg?: PieceAvgAggregateInputType
  sum?: PieceSumAggregateInputType
  min?: PieceMinAggregateInputType
  max?: PieceMaxAggregateInputType
}

export type GetPieceAggregateType<T extends AggregatePieceArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetPieceAggregateScalarType<T[P]>
}

export type GetPieceAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof PieceAvgAggregateOutputType ? PieceAvgAggregateOutputType[P] : never
}
    
    

export type pieceSelect = {
  id?: boolean
  piece_id?: boolean
  title?: boolean
  status?: boolean
  created?: boolean
  updated?: boolean
  video_info?: boolean | FindManyvideo_infoArgs
}

export type pieceInclude = {
  video_info?: boolean | FindManyvideo_infoArgs
}

export type pieceGetPayload<
  S extends boolean | null | undefined | pieceArgs,
  U = keyof S
> = S extends true
  ? piece
  : S extends undefined
  ? never
  : S extends pieceArgs | FindManypieceArgs
  ? 'include' extends U
    ? piece  & {
      [P in TrueKeys<S['include']>]:
      P extends 'video_info'
      ? Array<video_infoGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof piece ? piece[P]
: 
      P extends 'video_info'
      ? Array<video_infoGetPayload<S['select'][P]>> : never
    }
  : piece
: piece


export interface pieceDelegate {
  /**
   * Find zero or one Piece.
   * @param {FindOnepieceArgs} args - Arguments to find a Piece
   * @example
   * // Get one Piece
   * const piece = await prisma.piece.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnepieceArgs>(
    args: Subset<T, FindOnepieceArgs>
  ): CheckSelect<T, Prisma__pieceClient<piece | null>, Prisma__pieceClient<pieceGetPayload<T> | null>>
  /**
   * Find zero or more Pieces.
   * @param {FindManypieceArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Pieces
   * const pieces = await prisma.piece.findMany()
   * 
   * // Get first 10 Pieces
   * const pieces = await prisma.piece.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pieceWithIdOnly = await prisma.piece.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManypieceArgs>(
    args?: Subset<T, FindManypieceArgs>
  ): CheckSelect<T, Promise<Array<piece>>, Promise<Array<pieceGetPayload<T>>>>
  /**
   * Create a Piece.
   * @param {pieceCreateArgs} args - Arguments to create a Piece.
   * @example
   * // Create one Piece
   * const Piece = await prisma.piece.create({
   *   data: {
   *     // ... data to create a Piece
   *   }
   * })
   * 
  **/
  create<T extends pieceCreateArgs>(
    args: Subset<T, pieceCreateArgs>
  ): CheckSelect<T, Prisma__pieceClient<piece>, Prisma__pieceClient<pieceGetPayload<T>>>
  /**
   * Delete a Piece.
   * @param {pieceDeleteArgs} args - Arguments to delete one Piece.
   * @example
   * // Delete one Piece
   * const Piece = await prisma.piece.delete({
   *   where: {
   *     // ... filter to delete one Piece
   *   }
   * })
   * 
  **/
  delete<T extends pieceDeleteArgs>(
    args: Subset<T, pieceDeleteArgs>
  ): CheckSelect<T, Prisma__pieceClient<piece>, Prisma__pieceClient<pieceGetPayload<T>>>
  /**
   * Update one Piece.
   * @param {pieceUpdateArgs} args - Arguments to update one Piece.
   * @example
   * // Update one Piece
   * const piece = await prisma.piece.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends pieceUpdateArgs>(
    args: Subset<T, pieceUpdateArgs>
  ): CheckSelect<T, Prisma__pieceClient<piece>, Prisma__pieceClient<pieceGetPayload<T>>>
  /**
   * Delete zero or more Pieces.
   * @param {pieceDeleteManyArgs} args - Arguments to filter Pieces to delete.
   * @example
   * // Delete a few Pieces
   * const { count } = await prisma.piece.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends pieceDeleteManyArgs>(
    args: Subset<T, pieceDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Pieces.
   * @param {pieceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Pieces
   * const piece = await prisma.piece.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends pieceUpdateManyArgs>(
    args: Subset<T, pieceUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Piece.
   * @param {pieceUpsertArgs} args - Arguments to update or create a Piece.
   * @example
   * // Update or create a Piece
   * const piece = await prisma.piece.upsert({
   *   create: {
   *     // ... data to create a Piece
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Piece we want to update
   *   }
   * })
  **/
  upsert<T extends pieceUpsertArgs>(
    args: Subset<T, pieceUpsertArgs>
  ): CheckSelect<T, Prisma__pieceClient<piece>, Prisma__pieceClient<pieceGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManypieceArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregatePieceArgs>(args: Subset<T, AggregatePieceArgs>): Promise<GetPieceAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for piece.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__pieceClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  video_info<T extends FindManyvideo_infoArgs = {}>(args?: Subset<T, FindManyvideo_infoArgs>): CheckSelect<T, Promise<Array<video_info>>, Promise<Array<video_infoGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * piece findOne
 */
export type FindOnepieceArgs = {
  /**
   * Select specific fields to fetch from the piece
  **/
  select?: pieceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: pieceInclude | null
  /**
   * Filter, which piece to fetch.
  **/
  where: pieceWhereUniqueInput
}


/**
 * piece findMany
 */
export type FindManypieceArgs = {
  /**
   * Select specific fields to fetch from the piece
  **/
  select?: pieceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: pieceInclude | null
  /**
   * Filter, which pieces to fetch.
  **/
  where?: pieceWhereInput
  /**
   * Determine the order of the pieces to fetch.
  **/
  orderBy?: Enumerable<pieceOrderByInput>
  /**
   * Sets the position for listing pieces.
  **/
  cursor?: pieceWhereUniqueInput
  /**
   * The number of pieces to fetch. If negative number, it will take pieces before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` pieces.
  **/
  skip?: number
  distinct?: Enumerable<PieceDistinctFieldEnum>
}


/**
 * piece create
 */
export type pieceCreateArgs = {
  /**
   * Select specific fields to fetch from the piece
  **/
  select?: pieceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: pieceInclude | null
  /**
   * The data needed to create a piece.
  **/
  data: pieceCreateInput
}


/**
 * piece update
 */
export type pieceUpdateArgs = {
  /**
   * Select specific fields to fetch from the piece
  **/
  select?: pieceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: pieceInclude | null
  /**
   * The data needed to update a piece.
  **/
  data: pieceUpdateInput
  /**
   * Choose, which piece to update.
  **/
  where: pieceWhereUniqueInput
}


/**
 * piece updateMany
 */
export type pieceUpdateManyArgs = {
  data: pieceUpdateManyMutationInput
  where?: pieceWhereInput
}


/**
 * piece upsert
 */
export type pieceUpsertArgs = {
  /**
   * Select specific fields to fetch from the piece
  **/
  select?: pieceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: pieceInclude | null
  /**
   * The filter to search for the piece to update in case it exists.
  **/
  where: pieceWhereUniqueInput
  /**
   * In case the piece found by the `where` argument doesn't exist, create a new piece with this data.
  **/
  create: pieceCreateInput
  /**
   * In case the piece was found with the provided `where` argument, update it with this data.
  **/
  update: pieceUpdateInput
}


/**
 * piece delete
 */
export type pieceDeleteArgs = {
  /**
   * Select specific fields to fetch from the piece
  **/
  select?: pieceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: pieceInclude | null
  /**
   * Filter which piece to delete.
  **/
  where: pieceWhereUniqueInput
}


/**
 * piece deleteMany
 */
export type pieceDeleteManyArgs = {
  where?: pieceWhereInput
}


/**
 * piece without action
 */
export type pieceArgs = {
  /**
   * Select specific fields to fetch from the piece
  **/
  select?: pieceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: pieceInclude | null
}



/**
 * Model sentences
 */

export type sentences = {
  sentence: string | null
  video_id: number | null
  created: Date | null
  updated: Date | null
  id: number
}


export type AggregateSentences = {
  count: number
  avg: SentencesAvgAggregateOutputType | null
  sum: SentencesSumAggregateOutputType | null
  min: SentencesMinAggregateOutputType | null
  max: SentencesMaxAggregateOutputType | null
}

export type SentencesAvgAggregateOutputType = {
  video_id: number
  id: number
}

export type SentencesSumAggregateOutputType = {
  video_id: number | null
  id: number
}

export type SentencesMinAggregateOutputType = {
  video_id: number | null
  id: number
}

export type SentencesMaxAggregateOutputType = {
  video_id: number | null
  id: number
}


export type SentencesAvgAggregateInputType = {
  video_id?: true
  id?: true
}

export type SentencesSumAggregateInputType = {
  video_id?: true
  id?: true
}

export type SentencesMinAggregateInputType = {
  video_id?: true
  id?: true
}

export type SentencesMaxAggregateInputType = {
  video_id?: true
  id?: true
}

export type AggregateSentencesArgs = {
  where?: sentencesWhereInput
  orderBy?: Enumerable<sentencesOrderByInput>
  cursor?: sentencesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SentencesDistinctFieldEnum>
  count?: true
  avg?: SentencesAvgAggregateInputType
  sum?: SentencesSumAggregateInputType
  min?: SentencesMinAggregateInputType
  max?: SentencesMaxAggregateInputType
}

export type GetSentencesAggregateType<T extends AggregateSentencesArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetSentencesAggregateScalarType<T[P]>
}

export type GetSentencesAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof SentencesAvgAggregateOutputType ? SentencesAvgAggregateOutputType[P] : never
}
    
    

export type sentencesSelect = {
  sentence?: boolean
  video_id?: boolean
  created?: boolean
  updated?: boolean
  id?: boolean
  video_info?: boolean | video_infoArgs
}

export type sentencesInclude = {
  video_info?: boolean | video_infoArgs
}

export type sentencesGetPayload<
  S extends boolean | null | undefined | sentencesArgs,
  U = keyof S
> = S extends true
  ? sentences
  : S extends undefined
  ? never
  : S extends sentencesArgs | FindManysentencesArgs
  ? 'include' extends U
    ? sentences  & {
      [P in TrueKeys<S['include']>]:
      P extends 'video_info'
      ? video_infoGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof sentences ? sentences[P]
: 
      P extends 'video_info'
      ? video_infoGetPayload<S['select'][P]> | null : never
    }
  : sentences
: sentences


export interface sentencesDelegate {
  /**
   * Find zero or one Sentences.
   * @param {FindOnesentencesArgs} args - Arguments to find a Sentences
   * @example
   * // Get one Sentences
   * const sentences = await prisma.sentences.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnesentencesArgs>(
    args: Subset<T, FindOnesentencesArgs>
  ): CheckSelect<T, Prisma__sentencesClient<sentences | null>, Prisma__sentencesClient<sentencesGetPayload<T> | null>>
  /**
   * Find zero or more Sentences.
   * @param {FindManysentencesArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sentences
   * const sentences = await prisma.sentences.findMany()
   * 
   * // Get first 10 Sentences
   * const sentences = await prisma.sentences.findMany({ take: 10 })
   * 
   * // Only select the `sentence`
   * const sentencesWithSentenceOnly = await prisma.sentences.findMany({ select: { sentence: true } })
   * 
  **/
  findMany<T extends FindManysentencesArgs>(
    args?: Subset<T, FindManysentencesArgs>
  ): CheckSelect<T, Promise<Array<sentences>>, Promise<Array<sentencesGetPayload<T>>>>
  /**
   * Create a Sentences.
   * @param {sentencesCreateArgs} args - Arguments to create a Sentences.
   * @example
   * // Create one Sentences
   * const Sentences = await prisma.sentences.create({
   *   data: {
   *     // ... data to create a Sentences
   *   }
   * })
   * 
  **/
  create<T extends sentencesCreateArgs>(
    args: Subset<T, sentencesCreateArgs>
  ): CheckSelect<T, Prisma__sentencesClient<sentences>, Prisma__sentencesClient<sentencesGetPayload<T>>>
  /**
   * Delete a Sentences.
   * @param {sentencesDeleteArgs} args - Arguments to delete one Sentences.
   * @example
   * // Delete one Sentences
   * const Sentences = await prisma.sentences.delete({
   *   where: {
   *     // ... filter to delete one Sentences
   *   }
   * })
   * 
  **/
  delete<T extends sentencesDeleteArgs>(
    args: Subset<T, sentencesDeleteArgs>
  ): CheckSelect<T, Prisma__sentencesClient<sentences>, Prisma__sentencesClient<sentencesGetPayload<T>>>
  /**
   * Update one Sentences.
   * @param {sentencesUpdateArgs} args - Arguments to update one Sentences.
   * @example
   * // Update one Sentences
   * const sentences = await prisma.sentences.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends sentencesUpdateArgs>(
    args: Subset<T, sentencesUpdateArgs>
  ): CheckSelect<T, Prisma__sentencesClient<sentences>, Prisma__sentencesClient<sentencesGetPayload<T>>>
  /**
   * Delete zero or more Sentences.
   * @param {sentencesDeleteManyArgs} args - Arguments to filter Sentences to delete.
   * @example
   * // Delete a few Sentences
   * const { count } = await prisma.sentences.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends sentencesDeleteManyArgs>(
    args: Subset<T, sentencesDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Sentences.
   * @param {sentencesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sentences
   * const sentences = await prisma.sentences.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends sentencesUpdateManyArgs>(
    args: Subset<T, sentencesUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Sentences.
   * @param {sentencesUpsertArgs} args - Arguments to update or create a Sentences.
   * @example
   * // Update or create a Sentences
   * const sentences = await prisma.sentences.upsert({
   *   create: {
   *     // ... data to create a Sentences
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Sentences we want to update
   *   }
   * })
  **/
  upsert<T extends sentencesUpsertArgs>(
    args: Subset<T, sentencesUpsertArgs>
  ): CheckSelect<T, Prisma__sentencesClient<sentences>, Prisma__sentencesClient<sentencesGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManysentencesArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateSentencesArgs>(args: Subset<T, AggregateSentencesArgs>): Promise<GetSentencesAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for sentences.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__sentencesClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  video_info<T extends video_infoArgs = {}>(args?: Subset<T, video_infoArgs>): CheckSelect<T, Prisma__video_infoClient<video_info | null>, Prisma__video_infoClient<video_infoGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * sentences findOne
 */
export type FindOnesentencesArgs = {
  /**
   * Select specific fields to fetch from the sentences
  **/
  select?: sentencesSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: sentencesInclude | null
  /**
   * Filter, which sentences to fetch.
  **/
  where: sentencesWhereUniqueInput
}


/**
 * sentences findMany
 */
export type FindManysentencesArgs = {
  /**
   * Select specific fields to fetch from the sentences
  **/
  select?: sentencesSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: sentencesInclude | null
  /**
   * Filter, which sentences to fetch.
  **/
  where?: sentencesWhereInput
  /**
   * Determine the order of the sentences to fetch.
  **/
  orderBy?: Enumerable<sentencesOrderByInput>
  /**
   * Sets the position for listing sentences.
  **/
  cursor?: sentencesWhereUniqueInput
  /**
   * The number of sentences to fetch. If negative number, it will take sentences before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` sentences.
  **/
  skip?: number
  distinct?: Enumerable<SentencesDistinctFieldEnum>
}


/**
 * sentences create
 */
export type sentencesCreateArgs = {
  /**
   * Select specific fields to fetch from the sentences
  **/
  select?: sentencesSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: sentencesInclude | null
  /**
   * The data needed to create a sentences.
  **/
  data: sentencesCreateInput
}


/**
 * sentences update
 */
export type sentencesUpdateArgs = {
  /**
   * Select specific fields to fetch from the sentences
  **/
  select?: sentencesSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: sentencesInclude | null
  /**
   * The data needed to update a sentences.
  **/
  data: sentencesUpdateInput
  /**
   * Choose, which sentences to update.
  **/
  where: sentencesWhereUniqueInput
}


/**
 * sentences updateMany
 */
export type sentencesUpdateManyArgs = {
  data: sentencesUpdateManyMutationInput
  where?: sentencesWhereInput
}


/**
 * sentences upsert
 */
export type sentencesUpsertArgs = {
  /**
   * Select specific fields to fetch from the sentences
  **/
  select?: sentencesSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: sentencesInclude | null
  /**
   * The filter to search for the sentences to update in case it exists.
  **/
  where: sentencesWhereUniqueInput
  /**
   * In case the sentences found by the `where` argument doesn't exist, create a new sentences with this data.
  **/
  create: sentencesCreateInput
  /**
   * In case the sentences was found with the provided `where` argument, update it with this data.
  **/
  update: sentencesUpdateInput
}


/**
 * sentences delete
 */
export type sentencesDeleteArgs = {
  /**
   * Select specific fields to fetch from the sentences
  **/
  select?: sentencesSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: sentencesInclude | null
  /**
   * Filter which sentences to delete.
  **/
  where: sentencesWhereUniqueInput
}


/**
 * sentences deleteMany
 */
export type sentencesDeleteManyArgs = {
  where?: sentencesWhereInput
}


/**
 * sentences without action
 */
export type sentencesArgs = {
  /**
   * Select specific fields to fetch from the sentences
  **/
  select?: sentencesSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: sentencesInclude | null
}



/**
 * Model video_info
 */

export type video_info = {
  id: number
  piece_id: number | null
  video_id: string | null
  video_url: string | null
  created: Date | null
  updated: Date | null
  status: boolean | null
}


export type AggregateVideo_info = {
  count: number
  avg: Video_infoAvgAggregateOutputType | null
  sum: Video_infoSumAggregateOutputType | null
  min: Video_infoMinAggregateOutputType | null
  max: Video_infoMaxAggregateOutputType | null
}

export type Video_infoAvgAggregateOutputType = {
  id: number
  piece_id: number
}

export type Video_infoSumAggregateOutputType = {
  id: number
  piece_id: number | null
}

export type Video_infoMinAggregateOutputType = {
  id: number
  piece_id: number | null
}

export type Video_infoMaxAggregateOutputType = {
  id: number
  piece_id: number | null
}


export type Video_infoAvgAggregateInputType = {
  id?: true
  piece_id?: true
}

export type Video_infoSumAggregateInputType = {
  id?: true
  piece_id?: true
}

export type Video_infoMinAggregateInputType = {
  id?: true
  piece_id?: true
}

export type Video_infoMaxAggregateInputType = {
  id?: true
  piece_id?: true
}

export type AggregateVideo_infoArgs = {
  where?: video_infoWhereInput
  orderBy?: Enumerable<video_infoOrderByInput>
  cursor?: video_infoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<Video_infoDistinctFieldEnum>
  count?: true
  avg?: Video_infoAvgAggregateInputType
  sum?: Video_infoSumAggregateInputType
  min?: Video_infoMinAggregateInputType
  max?: Video_infoMaxAggregateInputType
}

export type GetVideo_infoAggregateType<T extends AggregateVideo_infoArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetVideo_infoAggregateScalarType<T[P]>
}

export type GetVideo_infoAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof Video_infoAvgAggregateOutputType ? Video_infoAvgAggregateOutputType[P] : never
}
    
    

export type video_infoSelect = {
  id?: boolean
  piece_id?: boolean
  video_id?: boolean
  video_url?: boolean
  created?: boolean
  updated?: boolean
  status?: boolean
  piece?: boolean | pieceArgs
  sentences?: boolean | FindManysentencesArgs
}

export type video_infoInclude = {
  piece?: boolean | pieceArgs
  sentences?: boolean | FindManysentencesArgs
}

export type video_infoGetPayload<
  S extends boolean | null | undefined | video_infoArgs,
  U = keyof S
> = S extends true
  ? video_info
  : S extends undefined
  ? never
  : S extends video_infoArgs | FindManyvideo_infoArgs
  ? 'include' extends U
    ? video_info  & {
      [P in TrueKeys<S['include']>]:
      P extends 'piece'
      ? pieceGetPayload<S['include'][P]> | null :
      P extends 'sentences'
      ? Array<sentencesGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof video_info ? video_info[P]
: 
      P extends 'piece'
      ? pieceGetPayload<S['select'][P]> | null :
      P extends 'sentences'
      ? Array<sentencesGetPayload<S['select'][P]>> : never
    }
  : video_info
: video_info


export interface video_infoDelegate {
  /**
   * Find zero or one Video_info.
   * @param {FindOnevideo_infoArgs} args - Arguments to find a Video_info
   * @example
   * // Get one Video_info
   * const video_info = await prisma.video_info.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOnevideo_infoArgs>(
    args: Subset<T, FindOnevideo_infoArgs>
  ): CheckSelect<T, Prisma__video_infoClient<video_info | null>, Prisma__video_infoClient<video_infoGetPayload<T> | null>>
  /**
   * Find zero or more Video_infos.
   * @param {FindManyvideo_infoArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Video_infos
   * const video_infos = await prisma.video_info.findMany()
   * 
   * // Get first 10 Video_infos
   * const video_infos = await prisma.video_info.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const video_infoWithIdOnly = await prisma.video_info.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyvideo_infoArgs>(
    args?: Subset<T, FindManyvideo_infoArgs>
  ): CheckSelect<T, Promise<Array<video_info>>, Promise<Array<video_infoGetPayload<T>>>>
  /**
   * Create a Video_info.
   * @param {video_infoCreateArgs} args - Arguments to create a Video_info.
   * @example
   * // Create one Video_info
   * const Video_info = await prisma.video_info.create({
   *   data: {
   *     // ... data to create a Video_info
   *   }
   * })
   * 
  **/
  create<T extends video_infoCreateArgs>(
    args: Subset<T, video_infoCreateArgs>
  ): CheckSelect<T, Prisma__video_infoClient<video_info>, Prisma__video_infoClient<video_infoGetPayload<T>>>
  /**
   * Delete a Video_info.
   * @param {video_infoDeleteArgs} args - Arguments to delete one Video_info.
   * @example
   * // Delete one Video_info
   * const Video_info = await prisma.video_info.delete({
   *   where: {
   *     // ... filter to delete one Video_info
   *   }
   * })
   * 
  **/
  delete<T extends video_infoDeleteArgs>(
    args: Subset<T, video_infoDeleteArgs>
  ): CheckSelect<T, Prisma__video_infoClient<video_info>, Prisma__video_infoClient<video_infoGetPayload<T>>>
  /**
   * Update one Video_info.
   * @param {video_infoUpdateArgs} args - Arguments to update one Video_info.
   * @example
   * // Update one Video_info
   * const video_info = await prisma.video_info.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends video_infoUpdateArgs>(
    args: Subset<T, video_infoUpdateArgs>
  ): CheckSelect<T, Prisma__video_infoClient<video_info>, Prisma__video_infoClient<video_infoGetPayload<T>>>
  /**
   * Delete zero or more Video_infos.
   * @param {video_infoDeleteManyArgs} args - Arguments to filter Video_infos to delete.
   * @example
   * // Delete a few Video_infos
   * const { count } = await prisma.video_info.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends video_infoDeleteManyArgs>(
    args: Subset<T, video_infoDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Video_infos.
   * @param {video_infoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Video_infos
   * const video_info = await prisma.video_info.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends video_infoUpdateManyArgs>(
    args: Subset<T, video_infoUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Video_info.
   * @param {video_infoUpsertArgs} args - Arguments to update or create a Video_info.
   * @example
   * // Update or create a Video_info
   * const video_info = await prisma.video_info.upsert({
   *   create: {
   *     // ... data to create a Video_info
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Video_info we want to update
   *   }
   * })
  **/
  upsert<T extends video_infoUpsertArgs>(
    args: Subset<T, video_infoUpsertArgs>
  ): CheckSelect<T, Prisma__video_infoClient<video_info>, Prisma__video_infoClient<video_infoGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyvideo_infoArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateVideo_infoArgs>(args: Subset<T, AggregateVideo_infoArgs>): Promise<GetVideo_infoAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for video_info.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__video_infoClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  piece<T extends pieceArgs = {}>(args?: Subset<T, pieceArgs>): CheckSelect<T, Prisma__pieceClient<piece | null>, Prisma__pieceClient<pieceGetPayload<T> | null>>;

  sentences<T extends FindManysentencesArgs = {}>(args?: Subset<T, FindManysentencesArgs>): CheckSelect<T, Promise<Array<sentences>>, Promise<Array<sentencesGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * video_info findOne
 */
export type FindOnevideo_infoArgs = {
  /**
   * Select specific fields to fetch from the video_info
  **/
  select?: video_infoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: video_infoInclude | null
  /**
   * Filter, which video_info to fetch.
  **/
  where: video_infoWhereUniqueInput
}


/**
 * video_info findMany
 */
export type FindManyvideo_infoArgs = {
  /**
   * Select specific fields to fetch from the video_info
  **/
  select?: video_infoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: video_infoInclude | null
  /**
   * Filter, which video_infos to fetch.
  **/
  where?: video_infoWhereInput
  /**
   * Determine the order of the video_infos to fetch.
  **/
  orderBy?: Enumerable<video_infoOrderByInput>
  /**
   * Sets the position for listing video_infos.
  **/
  cursor?: video_infoWhereUniqueInput
  /**
   * The number of video_infos to fetch. If negative number, it will take video_infos before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` video_infos.
  **/
  skip?: number
  distinct?: Enumerable<Video_infoDistinctFieldEnum>
}


/**
 * video_info create
 */
export type video_infoCreateArgs = {
  /**
   * Select specific fields to fetch from the video_info
  **/
  select?: video_infoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: video_infoInclude | null
  /**
   * The data needed to create a video_info.
  **/
  data: video_infoCreateInput
}


/**
 * video_info update
 */
export type video_infoUpdateArgs = {
  /**
   * Select specific fields to fetch from the video_info
  **/
  select?: video_infoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: video_infoInclude | null
  /**
   * The data needed to update a video_info.
  **/
  data: video_infoUpdateInput
  /**
   * Choose, which video_info to update.
  **/
  where: video_infoWhereUniqueInput
}


/**
 * video_info updateMany
 */
export type video_infoUpdateManyArgs = {
  data: video_infoUpdateManyMutationInput
  where?: video_infoWhereInput
}


/**
 * video_info upsert
 */
export type video_infoUpsertArgs = {
  /**
   * Select specific fields to fetch from the video_info
  **/
  select?: video_infoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: video_infoInclude | null
  /**
   * The filter to search for the video_info to update in case it exists.
  **/
  where: video_infoWhereUniqueInput
  /**
   * In case the video_info found by the `where` argument doesn't exist, create a new video_info with this data.
  **/
  create: video_infoCreateInput
  /**
   * In case the video_info was found with the provided `where` argument, update it with this data.
  **/
  update: video_infoUpdateInput
}


/**
 * video_info delete
 */
export type video_infoDeleteArgs = {
  /**
   * Select specific fields to fetch from the video_info
  **/
  select?: video_infoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: video_infoInclude | null
  /**
   * Filter which video_info to delete.
  **/
  where: video_infoWhereUniqueInput
}


/**
 * video_info deleteMany
 */
export type video_infoDeleteManyArgs = {
  where?: video_infoWhereInput
}


/**
 * video_info without action
 */
export type video_infoArgs = {
  /**
   * Select specific fields to fetch from the video_info
  **/
  select?: video_infoSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: video_infoInclude | null
}



/**
 * Deep Input Types
 */


export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter | null
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: NestedStringNullableFilter | null
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: string | NestedStringNullableFilter | null
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: NestedDateTimeNullableFilter | null
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: NestedIntNullableFilter | null
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
  not?: number | NestedIntNullableFilter | null
}

export type NestedBoolNullableFilter = {
  equals?: boolean | null
  not?: NestedBoolNullableFilter | null
}

export type BoolNullableFilter = {
  equals?: boolean | null
  not?: boolean | NestedBoolNullableFilter | null
}

export type PieceRelationFilter = {
  is?: pieceWhereInput | null
  isNot?: pieceWhereInput | null
}

export type Video_infoRelationFilter = {
  is?: video_infoWhereInput | null
  isNot?: video_infoWhereInput | null
}

export type sentencesWhereInput = {
  AND?: Enumerable<sentencesWhereInput>
  OR?: Array<sentencesWhereInput>
  NOT?: Enumerable<sentencesWhereInput>
  sentence?: string | StringNullableFilter | null
  video_id?: number | IntNullableFilter | null
  created?: Date | string | DateTimeNullableFilter | null
  updated?: Date | string | DateTimeNullableFilter | null
  id?: number | IntFilter
  video_info?: video_infoWhereInput | null
}

export type SentencesListRelationFilter = {
  every?: sentencesWhereInput
  some?: sentencesWhereInput
  none?: sentencesWhereInput
}

export type video_infoWhereInput = {
  AND?: Enumerable<video_infoWhereInput>
  OR?: Array<video_infoWhereInput>
  NOT?: Enumerable<video_infoWhereInput>
  id?: number | IntFilter
  piece_id?: number | IntNullableFilter | null
  video_id?: string | StringNullableFilter | null
  video_url?: string | StringNullableFilter | null
  created?: Date | string | DateTimeNullableFilter | null
  updated?: Date | string | DateTimeNullableFilter | null
  status?: boolean | BoolNullableFilter | null
  piece?: pieceWhereInput | null
  sentences?: SentencesListRelationFilter
}

export type Video_infoListRelationFilter = {
  every?: video_infoWhereInput
  some?: video_infoWhereInput
  none?: video_infoWhereInput
}

export type pieceWhereInput = {
  AND?: Enumerable<pieceWhereInput>
  OR?: Array<pieceWhereInput>
  NOT?: Enumerable<pieceWhereInput>
  id?: number | IntFilter
  piece_id?: string | StringNullableFilter | null
  title?: string | StringNullableFilter | null
  status?: string | StringNullableFilter | null
  created?: Date | string | DateTimeNullableFilter | null
  updated?: Date | string | DateTimeNullableFilter | null
  video_info?: Video_infoListRelationFilter
}

export type pieceOrderByInput = {
  id?: SortOrder
  piece_id?: SortOrder
  title?: SortOrder
  status?: SortOrder
  created?: SortOrder
  updated?: SortOrder
}

export type pieceWhereUniqueInput = {
  id?: number
}

export type video_infoOrderByInput = {
  id?: SortOrder
  piece_id?: SortOrder
  video_id?: SortOrder
  video_url?: SortOrder
  created?: SortOrder
  updated?: SortOrder
  status?: SortOrder
}

export type video_infoWhereUniqueInput = {
  id?: number
}

export type sentencesOrderByInput = {
  sentence?: SortOrder
  video_id?: SortOrder
  created?: SortOrder
  updated?: SortOrder
  id?: SortOrder
}

export type sentencesWhereUniqueInput = {
  id?: number
}

export type sentencesCreateWithoutVideo_infoInput = {
  sentence?: string | null
  created?: Date | string | null
  updated?: Date | string | null
}

export type sentencesCreateManyWithoutVideo_infoInput = {
  create?: Enumerable<sentencesCreateWithoutVideo_infoInput>
  connect?: Enumerable<sentencesWhereUniqueInput>
}

export type video_infoCreateWithoutPieceInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
  sentences?: sentencesCreateManyWithoutVideo_infoInput
}

export type video_infoCreateManyWithoutPieceInput = {
  create?: Enumerable<video_infoCreateWithoutPieceInput>
  connect?: Enumerable<video_infoWhereUniqueInput>
}

export type pieceCreateInput = {
  piece_id?: string | null
  title?: string | null
  status?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  video_info?: video_infoCreateManyWithoutPieceInput
}

export type sentencesUpdateWithoutVideo_infoDataInput = {
  sentence?: string | null
  created?: Date | string | null
  updated?: Date | string | null
}

export type sentencesUpdateWithWhereUniqueWithoutVideo_infoInput = {
  where: sentencesWhereUniqueInput
  data: sentencesUpdateWithoutVideo_infoDataInput
}

export type sentencesScalarWhereInput = {
  AND?: Enumerable<sentencesScalarWhereInput>
  OR?: Array<sentencesScalarWhereInput>
  NOT?: Enumerable<sentencesScalarWhereInput>
  sentence?: string | StringNullableFilter | null
  video_id?: number | IntNullableFilter | null
  created?: Date | string | DateTimeNullableFilter | null
  updated?: Date | string | DateTimeNullableFilter | null
  id?: number | IntFilter
}

export type sentencesUpdateManyDataInput = {
  sentence?: string | null
  created?: Date | string | null
  updated?: Date | string | null
}

export type sentencesUpdateManyWithWhereNestedInput = {
  where: sentencesScalarWhereInput
  data: sentencesUpdateManyDataInput
}

export type sentencesUpsertWithWhereUniqueWithoutVideo_infoInput = {
  where: sentencesWhereUniqueInput
  update: sentencesUpdateWithoutVideo_infoDataInput
  create: sentencesCreateWithoutVideo_infoInput
}

export type sentencesUpdateManyWithoutVideo_infoInput = {
  create?: Enumerable<sentencesCreateWithoutVideo_infoInput>
  connect?: Enumerable<sentencesWhereUniqueInput>
  set?: Enumerable<sentencesWhereUniqueInput>
  disconnect?: Enumerable<sentencesWhereUniqueInput>
  delete?: Enumerable<sentencesWhereUniqueInput>
  update?: Enumerable<sentencesUpdateWithWhereUniqueWithoutVideo_infoInput>
  updateMany?: Enumerable<sentencesUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<sentencesScalarWhereInput>
  upsert?: Enumerable<sentencesUpsertWithWhereUniqueWithoutVideo_infoInput>
}

export type video_infoUpdateWithoutPieceDataInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
  sentences?: sentencesUpdateManyWithoutVideo_infoInput
}

export type video_infoUpdateWithWhereUniqueWithoutPieceInput = {
  where: video_infoWhereUniqueInput
  data: video_infoUpdateWithoutPieceDataInput
}

export type video_infoScalarWhereInput = {
  AND?: Enumerable<video_infoScalarWhereInput>
  OR?: Array<video_infoScalarWhereInput>
  NOT?: Enumerable<video_infoScalarWhereInput>
  id?: number | IntFilter
  piece_id?: number | IntNullableFilter | null
  video_id?: string | StringNullableFilter | null
  video_url?: string | StringNullableFilter | null
  created?: Date | string | DateTimeNullableFilter | null
  updated?: Date | string | DateTimeNullableFilter | null
  status?: boolean | BoolNullableFilter | null
}

export type video_infoUpdateManyDataInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
}

export type video_infoUpdateManyWithWhereNestedInput = {
  where: video_infoScalarWhereInput
  data: video_infoUpdateManyDataInput
}

export type video_infoUpsertWithWhereUniqueWithoutPieceInput = {
  where: video_infoWhereUniqueInput
  update: video_infoUpdateWithoutPieceDataInput
  create: video_infoCreateWithoutPieceInput
}

export type video_infoUpdateManyWithoutPieceInput = {
  create?: Enumerable<video_infoCreateWithoutPieceInput>
  connect?: Enumerable<video_infoWhereUniqueInput>
  set?: Enumerable<video_infoWhereUniqueInput>
  disconnect?: Enumerable<video_infoWhereUniqueInput>
  delete?: Enumerable<video_infoWhereUniqueInput>
  update?: Enumerable<video_infoUpdateWithWhereUniqueWithoutPieceInput>
  updateMany?: Enumerable<video_infoUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<video_infoScalarWhereInput>
  upsert?: Enumerable<video_infoUpsertWithWhereUniqueWithoutPieceInput>
}

export type pieceUpdateInput = {
  piece_id?: string | null
  title?: string | null
  status?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  video_info?: video_infoUpdateManyWithoutPieceInput
}

export type pieceUpdateManyMutationInput = {
  piece_id?: string | null
  title?: string | null
  status?: string | null
  created?: Date | string | null
  updated?: Date | string | null
}

export type pieceCreateWithoutVideo_infoInput = {
  piece_id?: string | null
  title?: string | null
  status?: string | null
  created?: Date | string | null
  updated?: Date | string | null
}

export type pieceCreateOneWithoutVideo_infoInput = {
  create?: pieceCreateWithoutVideo_infoInput
  connect?: pieceWhereUniqueInput
}

export type video_infoCreateWithoutSentencesInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
  piece?: pieceCreateOneWithoutVideo_infoInput
}

export type video_infoCreateOneWithoutSentencesInput = {
  create?: video_infoCreateWithoutSentencesInput
  connect?: video_infoWhereUniqueInput
}

export type sentencesCreateInput = {
  sentence?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  video_info?: video_infoCreateOneWithoutSentencesInput
}

export type pieceUpdateWithoutVideo_infoDataInput = {
  piece_id?: string | null
  title?: string | null
  status?: string | null
  created?: Date | string | null
  updated?: Date | string | null
}

export type pieceUpsertWithoutVideo_infoInput = {
  update: pieceUpdateWithoutVideo_infoDataInput
  create: pieceCreateWithoutVideo_infoInput
}

export type pieceUpdateOneWithoutVideo_infoInput = {
  create?: pieceCreateWithoutVideo_infoInput
  connect?: pieceWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: pieceUpdateWithoutVideo_infoDataInput
  upsert?: pieceUpsertWithoutVideo_infoInput
}

export type video_infoUpdateWithoutSentencesDataInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
  piece?: pieceUpdateOneWithoutVideo_infoInput
}

export type video_infoUpsertWithoutSentencesInput = {
  update: video_infoUpdateWithoutSentencesDataInput
  create: video_infoCreateWithoutSentencesInput
}

export type video_infoUpdateOneWithoutSentencesInput = {
  create?: video_infoCreateWithoutSentencesInput
  connect?: video_infoWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: video_infoUpdateWithoutSentencesDataInput
  upsert?: video_infoUpsertWithoutSentencesInput
}

export type sentencesUpdateInput = {
  sentence?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  video_info?: video_infoUpdateOneWithoutSentencesInput
}

export type sentencesUpdateManyMutationInput = {
  sentence?: string | null
  created?: Date | string | null
  updated?: Date | string | null
}

export type video_infoCreateInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
  piece?: pieceCreateOneWithoutVideo_infoInput
  sentences?: sentencesCreateManyWithoutVideo_infoInput
}

export type video_infoUpdateInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
  piece?: pieceUpdateOneWithoutVideo_infoInput
  sentences?: sentencesUpdateManyWithoutVideo_infoInput
}

export type video_infoUpdateManyMutationInput = {
  video_id?: string | null
  video_url?: string | null
  created?: Date | string | null
  updated?: Date | string | null
  status?: boolean | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
